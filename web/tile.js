// Generated by LiveScript 1.2.0
(function(){
  var TILE_SIZE, d2r, r2d, bound, Point, LatLng, MercatorProjection;
  TILE_SIZE = 256;
  d2r = function(it){
    return it * Math.PI / 180;
  };
  r2d = function(it){
    return 180 * it / Math.PI;
  };
  bound = function(value, opt_min, opt_max){
    if (opt_min !== null) {
      value = Math.max(value, opt_min);
    }
    if (opt_max !== null) {
      value = Math.min(value, opt_max);
    }
    return value;
  };
  Point = function(x, y){
    return {
      x: x,
      y: y
    };
  };
  LatLng = function(lat, lng){
    return import$({
      _lat: lat,
      _lng: lng
    }, {
      lat: function(){
        return this._lat;
      },
      lng: function(){
        return this._lng;
      }
    });
  };
  MercatorProjection = {
    Point: Point,
    LatLng: LatLng,
    TILE_SIZE: TILE_SIZE,
    pixelOrigin_: new Point(TILE_SIZE / 2, TILE_SIZE / 2),
    pixelsPerLonDegree_: TILE_SIZE / 360,
    pixelsPerLonRadian_: TILE_SIZE / (2 * Math.PI),
    ll2p: function(latlng, p){
      var point, origin, siny;
      point = p || new Point(0, 0);
      origin = this.pixelOrigin_;
      siny = bound(Math.sin(d2r(latlng.lat())), -0.9999, 0.9999);
      console.log(origin.x, latlng.lng());
      point.x = origin.x + latlng.lng() * this.pixelsPerLonDegree_;
      point.y = origin.y + 0.5 * Math.log((1 + siny) / (1 - siny)) * -this.pixelsPerLonRadian_;
      return point;
    },
    p2ll: function(p){
      var o, latRadians, lng, lat;
      o = this.pixelOrigin_;
      latRadians = (p.y - o.y) / -this.pixelsPerLonRadian_;
      lng = (p.x - o.x) / this.pixelsPerLonDegree_;
      lat = r2d(2 * Math.atan(Math.exp(latRadians)) - Math.PI / 2);
      return new LatLng(lat, lng);
    },
    t2ll: function(x, y, z){
      var numTiles;
      numTiles = 1 << z;
      return this.p2ll(new Point(x * TILE_SIZE / numTiles, y * TILE_SIZE / numTiles));
    }
  };
  module.exports = MercatorProjection;
  import$(this.window != null ? this.tile = {} : this, MercatorProjection);
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
