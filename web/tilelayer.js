// Generated by LiveScript 1.2.0
var TileLayer, module;
TileLayer = function(config){
  var this$ = this;
  import$(this, config);
  if (typeof this.visible === "undefined") {
    this.visible = true;
  }
  this.url = this.url.replace(/\/$/, "");
  this.tileSize = new google.maps.Size(256, 256);
  this.vector = null;
  $.ajax(this.bv
    ? this.bv
    : this.url + "/vector.json").success(function(d){
    return this$.vector = d;
  });
  this.map.overlayMapTypes.setAt(0, null);
  this.map.overlayMapTypes.insertAt(0, this);
  if (this.visible) {
    this.map.overlayMapTypes.insertAt(0, this);
  }
  return this;
};
import$(TileLayer.prototype, {
  toggle: function(visible){
    this.visible = typeof visible === "undefined" ? !this.visible : visible;
    return this.map.overlayMapTypes.setAt(0, this.visible ? this : null);
  },
  getTile: function(c, z, doc){
    var x, y, div, x$, ref$, dx, dy;
    x = c.x, y = c.y;
    div = doc.createElement('div');
    x$ = div.style;
    x$.width = this.tileSize.width + "px";
    x$.height = this.tileSize.height + "px";
    x$.opacity = this.opacity + "";
    x$.backgroundPosition = "center center";
    x$.backgroundAttachment = "no-repeat";
    if (this.vector && !check(this.vector, z, x, y)) {
      if (!(this.extend && check(this.vector, z - 1, parseInt(x / 2), parseInt(y / 2)))) {
        return div;
      }
      ref$ = [(x % 2) * 256, (y % 2) * 256], dx = ref$[0], dy = ref$[1];
      ref$ = [z - 1, parseInt(x / 2), parseInt(y / 2)], z = ref$[0], x = ref$[1], y = ref$[2];
      div.style.backgroundPosition = "-" + dx + "px -" + dy + "px";
      div.style.backgroundSize = "512px 512px";
    }
    div.style.backgroundImage = "url(" + this.url + "/" + z + "/" + x + "/" + y + ".png)";
    return div;
  }
});
module == null && (module = {});
module.exports = TileLayer;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}