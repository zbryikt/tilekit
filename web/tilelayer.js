// Generated by LiveScript 1.2.0
var TileLayer, module;
TileLayer = function(config){
  var this$ = this;
  this.visible = true;
  import$(this, config);
  this.url = this.url.replace(/\/$/, "");
  this.tileSize = new google.maps.Size(256, 256);
  this.vector = null;
  $.ajax(this.bv
    ? this.bv
    : this.url + "/vector.json").success(function(d){
    return this$.vector = d;
  });
  this.map.overlayMapTypes.setAt(0, null);
  this.map.overlayMapTypes.insertAt(0, this);
  this.layer = config.map.overlayMapTypes[0];
  return this;
};
import$(TileLayer.prototype, {
  toggle: function(visible){
    this.visible = typeof visible === "undefined" ? !this.visible : visible;
    return this.map.overlayMapTypes.setAt(0, this.visible ? this : null);
  },
  getTile: function(c, z, doc){
    var div, x$, y$;
    div = doc.createElement('div');
    if (this.vector && !check(this.vector, z, c.x, c.y)) {
      return div;
    }
    x$ = div;
    y$ = x$.style;
    y$.width = this.tileSize.width + "px";
    y$.height = this.tileSize.height + "px";
    y$.opacity = this.opacity + "";
    y$.background = "url(" + this.url + "/" + z + "/" + c.x + "/" + c.y + ".png) center center no-repeat";
    return x$;
  }
});
module == null && (module = {});
module.exports = TileLayer;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}